{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../src/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import { ERROR_CONSTRUCTORS } from './constants';\nimport { CustomParseOptions, DefaultedParseOptions, ParseOptions, StringifyType, TypedValue } from './types';\n\nconst hasOwnProperty = <X, Y extends PropertyKey>(object: X, property: Y): object is X & Record<Y, unknown> =>\n\tObject.prototype.hasOwnProperty.call(object, property);\n\nconst isTypedValue = <T extends string>(obj: unknown): obj is TypedValue<T> => {\n\tif (typeof obj === 'object' && hasOwnProperty(obj, 't') && typeof obj.t === 'string') {\n\t\tconst keys = Object.keys(obj);\n\t\treturn keys.length === 1 || (keys.length === 2 && hasOwnProperty(obj, 'v') && typeof obj.v === 'string');\n\t}\n\treturn false;\n};\n\nconst convertType = <T extends string>(\n\t{ t, v }: TypedValue<StringifyType>,\n\toptions: ParseOptions<T>,\n):\n\t| bigint\n\t| boolean\n\t| Date\n\t| Error\n\t| Map<unknown, unknown>\n\t| null\n\t| number\n\t| Set<unknown>\n\t| string\n\t| symbol\n\t| undefined => {\n\tswitch (t) {\n\t\tcase 'function': {\n\t\t\treturn undefined;\n\t\t}\n\t\tcase 'null': {\n\t\t\treturn null; // eslint-disable-line unicorn/no-null\n\t\t}\n\t\tcase 'symbol': {\n\t\t\treturn v === undefined ? Symbol() : Symbol.for(v);\n\t\t}\n\t\tcase 'undefined': {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\tif (v === undefined) {\n\t\tthrow new Error('No value');\n\t}\n\tswitch (t) {\n\t\tcase 'bigint': {\n\t\t\tif (v.startsWith('r')) {\n\t\t\t\tlet radix = Number.parseInt(v[1], 36);\n\t\t\t\tif (radix === 0) {\n\t\t\t\t\tradix = 36;\n\t\t\t\t}\n\t\t\t\tconst negative = v[2] === '-';\n\t\t\t\tconst startIndex = negative ? 3 : 2;\n\t\t\t\tconst value = [v.slice(startIndex)].reduce(\n\t\t\t\t\t(r, v) => r * BigInt(radix) + BigInt(Number.parseInt(v, radix)),\n\t\t\t\t\tBigInt(0),\n\t\t\t\t);\n\t\t\t\treturn negative ? -value : value;\n\t\t\t}\n\t\t\treturn BigInt(v);\n\t\t}\n\t\tcase 'boolean': {\n\t\t\treturn v === '1';\n\t\t}\n\t\tcase 'Date': {\n\t\t\treturn v.includes('T') ? new Date(v) : new Date(Number(v));\n\t\t}\n\t\tcase 'Error': {\n\t\t\tconst { name, message, stack } = parse(v, options) as {\n\t\t\t\tname: string;\n\t\t\t\tmessage: string;\n\t\t\t\tstack: string | undefined;\n\t\t\t};\n\t\t\tconst ErrorConstructor = ERROR_CONSTRUCTORS.get(name) ?? Error;\n\t\t\tconst error = new ErrorConstructor(message);\n\t\t\terror.stack = stack;\n\t\t\treturn error;\n\t\t}\n\t\tcase 'Map': {\n\t\t\treturn new Map(parse(v, options) as Array<[unknown, unknown]>);\n\t\t}\n\t\tcase 'number': {\n\t\t\treturn Number(v);\n\t\t}\n\t\tcase 'Set': {\n\t\t\treturn new Set(parse(v, options) as Array<unknown>);\n\t\t}\n\t\tcase 'string': {\n\t\t\treturn v;\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error(`Unknown type: ${t}`);\n\t\t}\n\t}\n};\n\nconst decent = <T extends string>(obj: unknown, options: DefaultedParseOptions<T>): unknown => {\n\tconst { currentDepth, maxDepth } = options;\n\tif (currentDepth > maxDepth) {\n\t\tthrow new Error('Max depth exceeded');\n\t}\n\tif (Array.isArray(obj)) {\n\t\treturn obj.map((obj) => decent(obj, { ...options, currentDepth: currentDepth + 1 }));\n\t} else if (obj && typeof obj === 'object') {\n\t\tif (isTypedValue(obj)) {\n\t\t\tconst { customParse } = options;\n\t\t\tif (customParse) {\n\t\t\t\tconst { useResult, result } = customParse(\n\t\t\t\t\tobj as TypedValue<T>,\n\t\t\t\t\t{ ...options, currentDepth: currentDepth + 1 } as CustomParseOptions<T>,\n\t\t\t\t);\n\t\t\t\tif (useResult) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn convertType(obj as TypedValue<StringifyType>, { ...options, currentDepth: currentDepth + 1 });\n\t\t}\n\t\tconst tmpObj: { [key: string]: unknown } = {};\n\t\tfor (const [key, value] of Object.entries(obj)) {\n\t\t\ttmpObj[key] = decent(value, { ...options, currentDepth: currentDepth + 1 });\n\t\t}\n\t\treturn tmpObj;\n\t}\n\tthrow new Error('Invalid structure');\n};\n\nexport const parse = <T extends string>(json: string, options: ParseOptions<T> = {}): unknown => {\n\treturn decent(JSON.parse(json), {\n\t\tcurrentDepth: options.currentDepth ?? 0,\n\t\tcustomParse: options.customParse,\n\t\tmaxDepth: options.maxDepth ?? 20,\n\t});\n};\n"]}