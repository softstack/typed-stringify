{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;AA6DA,YAAY","sourcesContent":["export type StringifyType =\n\t| 'bigint'\n\t| 'boolean'\n\t| 'Date'\n\t| 'function'\n\t| 'Map'\n\t| 'null'\n\t| 'number'\n\t| 'Set'\n\t| 'string'\n\t| 'symbol'\n\t| 'undefined';\n\nexport type DateFormat = 'iso' | 'number';\n\nexport interface TypedValue<T extends string> {\n\tt: T;\n\tv?: string;\n}\n\n// Start stringify\n\nexport interface BaseStringifyOptions {\n\tbigintRadix: number;\n\tdateFormat: DateFormat;\n\tignoreFunctions: boolean;\n\tskipNull: boolean;\n\tskipUndefined: boolean;\n}\n\nexport interface CustomStringifyOptions<T extends string> extends BaseStringifyOptions {\n\tcustomStringify: CustomStringify<T>;\n}\n\nexport type CustomStringifyResult<T extends string> = { useResult: boolean; result?: TypedValue<T> };\n\nexport type CustomStringify<T extends string> = (\n\tobj: unknown,\n\toptions: CustomStringifyOptions<T>,\n) => CustomStringifyResult<T>;\n\nexport interface DefaultedStringifyOptions<T extends string> extends BaseStringifyOptions {\n\tcustomStringify?: CustomStringify<T>;\n}\n\nexport type StringifyOptions<T extends string> = Partial<DefaultedStringifyOptions<T>>;\n\n// End stringify\n\n// Start parse\n\nexport interface CustomParseOptions<T extends string> {\n\tcustomParse: CustomParse<T>;\n}\n\nexport type CustomParseResult = { useResult: boolean; result?: unknown };\n\nexport type CustomParse<T extends string> = (obj: TypedValue<T>, options: CustomParseOptions<T>) => CustomParseResult;\n\nexport type ParseOptions<T extends string> = Partial<CustomParseOptions<T>>;\n\n// End parse\n"]}